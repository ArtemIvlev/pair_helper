"""fix_tune_foreign_keys

Revision ID: dbb6d9e0ffaa
Revises: a186f8c3dc20
Create Date: 2025-08-11 14:00:31.281330

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'dbb6d9e0ffaa'
down_revision = 'a186f8c3dc20'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Убираем удаление таблиц, которые все еще используются
    # op.drop_table('admin_users')
    # op.drop_index('ix_daily_questions_id', table_name='daily_questions')
    # op.drop_table('daily_questions')
    # op.drop_index('ix_answers_id', table_name='answers')
    # op.drop_table('answers')
    op.drop_constraint('pair_daily_tune_questions_question_id_fkey', 'pair_daily_tune_questions', type_='foreignkey')
    op.create_foreign_key(None, 'pair_daily_tune_questions', 'tune_quiz_questions', ['question_id'], ['id'])
    op.alter_column('questions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('questions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_constraint('questions_number_key', 'questions', type_='unique')
    op.create_index(op.f('ix_questions_category'), 'questions', ['category'], unique=False)
    op.create_index(op.f('ix_questions_id'), 'questions', ['id'], unique=False)
    op.create_index(op.f('ix_questions_number'), 'questions', ['number'], unique=True)
    op.drop_constraint('tune_answers_question_id_fkey', 'tune_answers', type_='foreignkey')
    op.create_foreign_key(None, 'tune_answers', 'tune_quiz_questions', ['question_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'tune_answers', type_='foreignkey')
    op.create_foreign_key('tune_answers_question_id_fkey', 'tune_answers', 'questions', ['question_id'], ['id'])
    op.drop_index(op.f('ix_questions_number'), table_name='questions')
    op.drop_index(op.f('ix_questions_id'), table_name='questions')
    op.drop_index(op.f('ix_questions_category'), table_name='questions')
    op.create_unique_constraint('questions_number_key', 'questions', ['number'])
    op.alter_column('questions', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('questions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_constraint(None, 'pair_daily_tune_questions', type_='foreignkey')
    op.create_foreign_key('pair_daily_tune_questions_question_id_fkey', 'pair_daily_tune_questions', 'questions', ['question_id'], ['id'])
    op.create_table('answers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['daily_questions.id'], name='answers_question_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='answers_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='answers_pkey')
    )
    op.create_index('ix_answers_id', 'answers', ['id'], unique=False)
    op.create_table('daily_questions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='daily_questions_pkey')
    )
    op.create_index('ix_daily_questions_id', 'daily_questions', ['id'], unique=False)
    op.create_table('admin_users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='admin_users_pkey'),
    sa.UniqueConstraint('username', name='admin_users_username_key')
    )
    # ### end Alembic commands ###
