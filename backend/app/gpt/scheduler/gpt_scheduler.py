import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Optional
from sqlalchemy.orm import Session

from app.core.database import SessionLocal
from app.services.scheduler import scheduler
from app.models.gpt_task import GPTTask, TaskStatus, TaskType
from ..services.gpt_service import GPTService

logger = logging.getLogger(__name__)


class GPTScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ GPT –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.gpt_service = GPTService()
        
    async def schedule_daily_analysis(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ GPT –∞–Ω–∞–ª–∏–∑–∞...")
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
            from app.models.pair import Pair
            active_pairs = db.query(Pair).filter(Pair.is_active == True).all()
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(active_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            for pair in active_pairs:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
                    await self.gpt_service.create_task(
                        task_type=TaskType.RELATIONSHIP_ANALYSIS,
                        input_data={
                            "analysis_date": datetime.utcnow().isoformat(),
                            "pair_id": pair.id
                        },
                        pair_id=pair.id
                    )
                    
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–∞—Ä—ã {pair.id}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä—ã {pair.id}: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á –≤ —Ñ–æ–Ω–µ
            await self._process_pending_tasks()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        finally:
            db.close()
    
    async def schedule_weekly_feedback_analysis(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        logger.info("üìä –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            from app.models.feedback import Feedback
            week_ago = datetime.utcnow() - timedelta(days=7)
            
            recent_feedback = db.query(Feedback).filter(
                Feedback.created_at >= week_ago
            ).all()
            
            if recent_feedback:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                feedback_data = [
                    {
                        "id": f.id,
                        "text": f.text,
                        "rating": f.rating,
                        "created_at": f.created_at.isoformat()
                    }
                    for f in recent_feedback
                ]
                
                await self.gpt_service.create_task(
                    task_type=TaskType.FEEDBACK_ANALYSIS,
                    input_data={
                        "feedback_data": feedback_data,
                        "period": "weekly",
                        "total_feedback": len(feedback_data)
                    }
                )
                
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ {len(feedback_data)} –æ—Ç–∑—ã–≤–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        finally:
            db.close()
    
    async def schedule_mood_trend_analysis(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        logger.info("üòä –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π...")
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            from app.models.user import User
            active_users = db.query(User).filter(User.is_active == True).all()
            
            for user in active_users:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                    await self.gpt_service.create_task(
                        task_type=TaskType.MOOD_ANALYSIS,
                        input_data={
                            "analysis_period": "monthly",
                            "user_id": user.id
                        },
                        user_id=user.id
                    )
                    
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {e}")
        finally:
            db.close()
    
    async def schedule_question_generation(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        logger.info("‚ùì –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            await self.gpt_service.create_task(
                task_type=TaskType.QUESTION_GENERATION,
                input_data={
                    "generation_date": datetime.utcnow().isoformat(),
                    "question_types": ["relationship", "personal", "future", "values"],
                    "count": 20
                }
            )
            
            logger.info("–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
    
    async def _process_pending_tasks(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏
            pending_tasks = db.query(GPTTask).filter(
                GPTTask.status == TaskStatus.PENDING
            ).limit(10).all()  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–¥–∞—á
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_tasks)} –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á")
            
            for task in pending_tasks:
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
                    asyncio.create_task(self.gpt_service.process_task(task.id))
                    logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ {task.id}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á: {e}")
        finally:
            db.close()
    
    async def cleanup_old_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á"""
        logger.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á...")
        
        db = SessionLocal()
        try:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            month_ago = datetime.utcnow() - timedelta(days=30)
            
            old_tasks = db.query(GPTTask).filter(
                GPTTask.created_at < month_ago,
                GPTTask.status.in_([TaskStatus.COMPLETED, TaskStatus.FAILED])
            ).all()
            
            for task in old_tasks:
                db.delete(task)
            
            db.commit()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(old_tasks)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á: {e}")
            db.rollback()
        finally:
            db.close()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
gpt_scheduler = GPTScheduler()


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
def register_gpt_jobs():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è GPT –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00)
    scheduler.scheduler.add_job(
        gpt_scheduler.schedule_daily_analysis,
        'cron',
        hour=6,
        minute=0,
        id='gpt_daily_analysis',
        name='–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π GPT –∞–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π'
    )
    
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 8:00)
    scheduler.scheduler.add_job(
        gpt_scheduler.schedule_weekly_feedback_analysis,
        'cron',
        day_of_week='mon',
        hour=8,
        minute=0,
        id='gpt_weekly_feedback',
        name='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'
    )
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 10:00)
    scheduler.scheduler.add_job(
        gpt_scheduler.schedule_mood_trend_analysis,
        'cron',
        day_of_week='sun',
        hour=10,
        minute=0,
        id='gpt_mood_analysis',
        name='–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π'
    )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–∫–∞–∂–¥—ã–µ 3 –¥–Ω—è –≤ 12:00)
    scheduler.scheduler.add_job(
        gpt_scheduler.schedule_question_generation,
        'cron',
        hour=12,
        minute=0,
        id='gpt_question_generation',
        name='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'
    )
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á (–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 2:00)
    scheduler.scheduler.add_job(
        gpt_scheduler.cleanup_old_tasks,
        'cron',
        day_of_week='sun',
        hour=2,
        minute=0,
        id='gpt_cleanup',
        name='–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö GPT –∑–∞–¥–∞—á'
    )
    
    logger.info("‚úÖ GPT –∑–∞–¥–∞—á–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ")
