import os
import logging
import fnmatch
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from starlette.middleware.base import BaseHTTPMiddleware

from app.core.config import settings
from app.api.api_v1.api import api_router
from app.core.database import engine
from app.models import Base
from app.middleware.security import RateLimitMiddleware, SecurityHeadersMiddleware, TelegramValidationMiddleware, ProxyHeadersMiddleware
from app.middleware.usage_analytics import UsageAnalyticsMiddleware
from app.notifications import rules as _notification_rules  # noqa: F401
from app.notifications.engine import NotificationEngine

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–¥–µ
BUILD_DATE = os.getenv("BUILD_DATE", "unknown")
BUILD_ID = os.getenv("BUILD_ID", "unknown") 
BUILD_MARKER = os.getenv("BUILD_MARKER", "unknown")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–∞—Å—Ç–æ–º–Ω—ã–π middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ—Å—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π wildcards
class CustomTrustedHostMiddleware(BaseHTTPMiddleware):
    def __init__(self, app, allowed_hosts):
        super().__init__(app)
        self.allowed_hosts = allowed_hosts

    async def dispatch(self, request: Request, call_next):
        host = request.headers.get("host", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ö–æ—Å—Ç—ã
        if self._is_host_allowed(host):
            return await call_next(request)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.warning(f"Host not allowed: {host}")
        raise HTTPException(status_code=400, detail="Invalid host header")
    
    def _is_host_allowed(self, host: str) -> bool:
        for allowed_host in self.allowed_hosts:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–∑ allowed_host –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_allowed = allowed_host.replace("https://", "").replace("http://", "")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å wildcards
            if fnmatch.fnmatch(host, clean_allowed):
                return True
            
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if host == clean_allowed:
                return True
        
        return False

# Create database tables
Base.metadata.create_all(bind=engine)

app = FastAPI(
    title="–ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π API",
    description="API –¥–ª—è Telegram Web App –¥–ª—è –ø–∞—Ä",
    version="1.0.0",
    openapi_url=f"{settings.API_V1_STR}/openapi.json"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∑–∞ –ø—Ä–æ–∫—Å–∏ (nginx) - –∫–∞—Å—Ç–æ–º–Ω—ã–π middleware —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π wildcards
app.add_middleware(
    CustomTrustedHostMiddleware,
    allowed_hosts=settings.ALLOWED_HOSTS
)

# Set up CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_HOSTS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Trusted hosts middleware —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã—à–µ

# Security middlewares (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
app.add_middleware(SecurityHeadersMiddleware)
app.add_middleware(ProxyHeadersMiddleware)  # –ü–µ—Ä–≤—ã–º - –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è IP
app.add_middleware(RateLimitMiddleware, calls=100, period=60)  # 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
app.add_middleware(TelegramValidationMiddleware)
app.add_middleware(UsageAnalyticsMiddleware)

# Include API router
app.include_router(api_router, prefix=settings.API_V1_STR)

@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info(f"üöÄ –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π Backend –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üì¶ Build ID: {BUILD_ID}")
    logger.info(f"üìÖ Build Date: {BUILD_DATE}")
    logger.info(f"üè∑Ô∏è  {BUILD_MARKER}")
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞ Postgres –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø—Ä–∞–≤–∏–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ)
    app.state.notification_engine = NotificationEngine()

@app.get("/")
async def root():
    return {
        "message": "–ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π API", 
        "version": "1.0.0",
        "build_id": BUILD_ID,
        "build_date": BUILD_DATE,
        "status": "optimized_v2"  # –ï—â–µ –æ–¥–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–µ—à–∞
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "build_id": BUILD_ID,
        "build_date": BUILD_DATE,
        "build_marker": BUILD_MARKER
    }
