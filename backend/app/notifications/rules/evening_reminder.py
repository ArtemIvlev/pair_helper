from __future__ import annotations

from datetime import timedelta, date, datetime, timezone
from typing import Dict, Any, Iterable, Optional, Tuple

from app.core.config import settings
from app.core.database import SessionLocal
from app.models import User, Pair, Mood, UserAnswer, UsageEvent, Question, PairDailyQuestion
from app.models.tune import PairDailyTuneQuestion, TuneAnswer, TuneQuizQuestion
from ..base import ScheduledTrigger, Rule, register_rule, msk_to_utc_cron


class EveningReminderRule:
    id = "evening_reminder"
    trigger = ScheduledTrigger(cron=msk_to_utc_cron(20, 0))  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00 MSK
    priority = 85

    def select_targets(self, ctx: Dict[str, Any]) -> Iterable[User]:
        session = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞—Ä–∞
            from sqlalchemy import or_
            
            users_with_pairs = session.query(User).join(
                Pair, 
                or_(User.id == Pair.user1_id, User.id == Pair.user2_id)
            ).filter(Pair.status == "active").all()
            
            return users_with_pairs
        finally:
            session.close()

    def is_allowed(self, ctx: Dict[str, Any], user: User) -> bool:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞
        session = SessionLocal()
        try:
            four_hours_ago = datetime.now(timezone.utc) - timedelta(hours=4)
            
            recent_activity = session.query(UsageEvent).filter(
                UsageEvent.telegram_id == user.telegram_id,
                UsageEvent.ts >= four_hours_ago
            ).first()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            return not recent_activity
            
        finally:
            session.close()

    def cooldown(self):
        return timedelta(hours=24)

    def make_dedupe(self, ctx: Dict[str, Any], user: User) -> Dict[str, Any]:
        return {"entity_type": None, "entity_id": None, "date_bucket": date.today().isoformat()}

    def _get_partner_info(self, session, user: User) -> Tuple[Optional[User], Optional[Pair]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ –∏ –ø–∞—Ä–µ"""
        pair = session.query(Pair).filter(
            (Pair.user1_id == user.id) | (Pair.user2_id == user.id),
            Pair.status == "active"
        ).first()
        
        if not pair:
            return None, None
            
        partner_id = pair.user2_id if pair.user1_id == user.id else pair.user1_id
        partner = session.query(User).filter(User.id == partner_id).first()
        
        return partner, pair

    def _check_daily_question_status(self, session, user: User, partner: User, pair: Pair) -> Tuple[bool, bool, Optional[Question]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞ –¥–Ω—è"""
        today = date.today()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–Ω—è –¥–ª—è –ø–∞—Ä—ã
        daily_question = session.query(PairDailyQuestion).filter(
            PairDailyQuestion.pair_id == pair.id,
            PairDailyQuestion.date == today
        ).first()
        
        if not daily_question:
            return False, False, None
            
        question = session.query(Question).filter(Question.id == daily_question.question_id).first()
        if not question:
            return False, False, None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã
        user_answered = session.query(UserAnswer).filter(
            UserAnswer.user_id == user.id,
            UserAnswer.question_id == question.id
        ).first() is not None
        
        partner_answered = session.query(UserAnswer).filter(
            UserAnswer.user_id == partner.id,
            UserAnswer.question_id == question.id
        ).first() is not None
        
        return user_answered, partner_answered, question

    def _check_tune_status(self, session, user: User, partner: User, pair: Pair) -> Tuple[bool, bool, Optional[TuneQuizQuestion]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        today = date.today()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–∞—Ä—ã
        tune_question = session.query(PairDailyTuneQuestion).filter(
            PairDailyTuneQuestion.pair_id == pair.id,
            PairDailyTuneQuestion.date == today
        ).first()
        
        if not tune_question:
            return False, False, None
            
        question = session.query(TuneQuizQuestion).filter(TuneQuizQuestion.id == tune_question.question_id).first()
        if not question:
            return False, False, None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ö–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å 2 —Ä–∞–∑–∞: –æ —Å–µ–±–µ –∏ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
        
        # –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã
        my_about_me = session.query(TuneAnswer).filter(
            TuneAnswer.pair_id == pair.id,
            TuneAnswer.question_id == question.id,
            TuneAnswer.author_user_id == user.id,
            TuneAnswer.subject_user_id == user.id
        ).first()
        
        my_about_partner = session.query(TuneAnswer).filter(
            TuneAnswer.pair_id == pair.id,
            TuneAnswer.question_id == question.id,
            TuneAnswer.author_user_id == user.id,
            TuneAnswer.subject_user_id == partner.id
        ).first()
        
        # –û—Ç–≤–µ—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        partner_about_himself = session.query(TuneAnswer).filter(
            TuneAnswer.pair_id == pair.id,
            TuneAnswer.question_id == question.id,
            TuneAnswer.author_user_id == partner.id,
            TuneAnswer.subject_user_id == partner.id
        ).first()
        
        partner_about_me = session.query(TuneAnswer).filter(
            TuneAnswer.pair_id == pair.id,
            TuneAnswer.question_id == question.id,
            TuneAnswer.author_user_id == partner.id,
            TuneAnswer.subject_user_id == user.id
        ).first()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫—É –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –æ —Å–µ–±–µ –ò –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
        user_completed = my_about_me is not None and my_about_partner is not None
        partner_completed = partner_about_himself is not None and partner_about_me is not None
        
        return user_completed, partner_completed, question

    def _check_partner_activity(self, session, partner: User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞"""
        four_hours_ago = datetime.now(timezone.utc) - timedelta(hours=4)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ UsageEvent
        recent_activity = session.query(UsageEvent).filter(
            UsageEvent.telegram_id == partner.telegram_id,
            UsageEvent.ts >= four_hours_ago
        ).first()
        
        return recent_activity is not None

    def render(self, ctx: Dict[str, Any], user: User) -> Dict[str, Any]:
        session = SessionLocal()
        try:
            partner, pair = self._get_partner_info(session, user)
            if not partner or not pair:
                return None  # –ù–µ—Ç –ø–∞—Ä—ã - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            
            webapp_base_url = settings.TELEGRAM_WEBAPP_URL or "https://gallery.homoludens.photos/pulse_of_pair/"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞ –¥–Ω—è
            user_answered_daily, partner_answered_daily, daily_question = self._check_daily_question_status(
                session, user, partner, pair
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_answered_tune, partner_answered_tune, tune_question = self._check_tune_status(
                session, user, partner, pair
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_active = self._check_partner_activity(session, partner)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
            text_parts = []
            buttons = []
            
            # –ï—Å–ª–∏ –æ–±–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if (user_answered_daily and partner_answered_daily and 
                user_answered_tune and partner_answered_tune):
                return None
            
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –¥–Ω—è
            if daily_question:
                if not user_answered_daily and partner_answered_daily:
                    text_parts.append(f"üí¨ {partner.first_name} –æ—Ç–≤–µ—Ç–∏–ª(–∞) –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è, –∞ –≤—ã –µ—â—ë –Ω–µ—Ç!")
                    buttons.append({
                        "text": "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è", 
                        "web_app": {"url": f"{webapp_base_url}?tgWebAppStartParam=questions"}
                    })
                elif not user_answered_daily and not partner_answered_daily:
                    text_parts.append("üí¨ –í–æ–ø—Ä–æ—Å –¥–Ω—è –∂–¥—ë—Ç –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤!")
                    buttons.append({
                        "text": "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è", 
                        "web_app": {"url": f"{webapp_base_url}?tgWebAppStartParam=questions"}
                    })
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if tune_question:
                if not user_answered_tune and partner_answered_tune:
                    text_parts.append(f"üéØ {partner.first_name} –ø—Ä–æ—à—ë–ª(–∞) —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∞ –≤—ã –µ—â—ë –Ω–µ—Ç!")
                    buttons.append({
                        "text": "–ü—Ä–æ–π—Ç–∏ —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫—É", 
                        "web_app": {"url": f"{webapp_base_url}?tgWebAppStartParam=tune"}
                    })
                elif not user_answered_tune and not partner_answered_tune:
                    text_parts.append("üéØ –°–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∂–¥—ë—Ç –≤–∞—Å –æ–±–æ–∏—Ö!")
                    buttons.append({
                        "text": "–ü—Ä–æ–π—Ç–∏ —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫—É", 
                        "web_app": {"url": f"{webapp_base_url}?tgWebAppStartParam=tune"}
                    })
            
            # –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
            if not partner_active and not text_parts:
                text_parts.append(f"üåô {partner.first_name} —Ç–æ–∂–µ –Ω–µ –ø—Ä–æ—è–≤–ª—è–ª(–∞) –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –≤–º–µ—Å—Ç–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?")
                buttons.extend([
                    {"text": "–û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "web_app": {"url": f"{webapp_base_url}?tgWebAppStartParam=mood"}},
                    {"text": "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "web_app": {"url": f"{webapp_base_url}?tgWebAppStartParam=main"}}
                ])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∫–Ω–æ–ø–∫—É
            if text_parts and len(buttons) < 2:
                buttons.append({
                    "text": "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                    "web_app": {"url": f"{webapp_base_url}?tgWebAppStartParam=main"}
                })
            
            text = " ".join(text_parts)
            
            reply_markup = {
                "inline_keyboard": [buttons] if len(buttons) == 1 else [buttons[:2], buttons[2:]] if len(buttons) > 2 else [buttons]
            }
            
            return {"text": text, "reply_markup": reply_markup}
            
        finally:
            session.close()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
register_rule(EveningReminderRule())
