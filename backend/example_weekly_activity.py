#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API weekly-activity
"""

import requests
import json
from datetime import datetime, timedelta

def get_weekly_activity(pair_id: int, week_start: str, base_url: str = "http://localhost:8000"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –∑–∞ –Ω–µ–¥–µ–ª—é (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API)
    
    Args:
        pair_id: ID –ø–∞—Ä—ã
        week_start: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        base_url: –ë–∞–∑–æ–≤—ã–π URL API
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã
    """
    
    url = f"{base_url}/api/v1/internal/pair/{pair_id}/weekly-activity"
    params = {"week_start": week_start}
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def format_activity_report(data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç API
    """
    if not data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print("=" * 60)
    print(f"–û–¢–ß–ï–¢ –û–ë –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–ê–†–´")
    print("=" * 60)
    print(f"–ü–∞—Ä–∞: {data['user1_name']} –∏ {data['user2_name']}")
    print(f"–ü–µ—Ä–∏–æ–¥: {data['week_start']} - {data['week_end']}")
    print(f"–°–≤–æ–¥–∫–∞: {data['summary']}")
    print()
    
    if not data['activities']:
        print("–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
    activities_by_day = {}
    for activity in data['activities']:
        day = activity['date']
        if day not in activities_by_day:
            activities_by_day[day] = []
        activities_by_day[day].append(activity)
    
    # –í—ã–≤–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
    for day in sorted(activities_by_day.keys()):
        print(f"üìÖ {day}")
        print("-" * 40)
        
        for activity in activities_by_day[day]:
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            emoji_map = {
                "mood": "üòä",
                "appreciation": "üôè",
                "ritual": "‚ú®",
                "calendar": "üìÖ",
                "emotion_note": "üí≠",
                "question": "‚ùì",
                "tune": "üéµ"
            }
            
            emoji = emoji_map.get(activity['type'], "üìù")
            time_str = activity['timestamp'].split('T')[1][:5] if 'T' in activity['timestamp'] else ""
            
            print(f"{emoji} {time_str} | {activity['user_name']}: {activity['title']}")
            if activity['description'] and len(activity['description']) > 50:
                print(f"   {activity['description'][:50]}...")
            elif activity['description']:
                print(f"   {activity['description']}")
            print()
    
    print("=" * 60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    pair_id = 1  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–∞—Ä—ã
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    today = datetime.now()
    current_week_start = (today - timedelta(days=today.weekday())).strftime("%Y-%m-%d")
    
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é...")
    current_week_data = get_weekly_activity(pair_id, current_week_start)
    format_activity_report(current_week_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é
    last_week_start = (today - timedelta(days=today.weekday() + 7)).strftime("%Y-%m-%d")
    
    print("\n" + "="*60)
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é...")
    last_week_data = get_weekly_activity(pair_id, last_week_start)
    format_activity_report(last_week_data)

if __name__ == "__main__":
    main()
