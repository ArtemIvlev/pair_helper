import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–¥–µ
BUILD_DATE = os.getenv("BUILD_DATE", "unknown")
BUILD_ID = os.getenv("BUILD_ID", "unknown") 
BUILD_MARKER = os.getenv("BUILD_MARKER", "unknown")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher()

# URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEBAPP_URL = os.getenv("TELEGRAM_WEBAPP_URL", "http://localhost:3000")


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â—É—é –∫–æ–º–∞–Ω–¥—É
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (username: {message.from_user.username})")
    logging.info(f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã: {message.text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    args = message.text.split()
    webapp_url = WEBAPP_URL
    logging.info(f"–í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")
    
    if len(args) > 1 and args[1].startswith("invite_"):
        invite_code = args[1].replace("invite_", "")
        webapp_url = f"{WEBAPP_URL}?invite={invite_code}"
        logging.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite_code}")
        logging.info(f"üîó URL —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º: {webapp_url}")
    else:
        logging.info("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if len(args) > 1 and args[1].startswith("invite_"):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
                web_app=WebAppInfo(url=webapp_url)
            )]
        ])
        
        await message.answer(
            f"üéâ –í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –ø–∞—Ä—É!\n\n"
            f"–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{invite_code}`\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–µ—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏!",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
                web_app=WebAppInfo(url=webapp_url)
            )]
        ])
        
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º\n"
            "‚Ä¢ –ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –æ –∑–Ω–∞–Ω–∏–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=keyboard
        )


@dp.message(Command("invite"))
async def cmd_invite(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /invite"""
    import httpx
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /invite –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (username: {message.from_user.username})")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{os.getenv('API_BASE_URL', 'http://192.168.2.228:8000')}/api/v1/invitations/generate",
                params={"inviter_telegram_id": message.from_user.id}
            )
            
            if response.status_code == 200:
                invitation_data = response.json()
                invite_code = invitation_data["code"]
                invite_link = f"https://t.me/PulseOfPair_Bot/pulse_of_pair?startapp=invite_{invite_code}"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="–û—Ç–∫—Ä—ã—Ç—å –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
                        web_app=WebAppInfo(url=WEBAPP_URL)
                    )]
                ])
                
                await message.answer(
                    f"üéâ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞!\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É:\n"
                    f"`{invite_link}`\n\n"
                    f"–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 7 –¥–Ω–µ–π.",
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
                )
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π Bot - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∞—Ä

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/invite - –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
‚Ä¢ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∑–Ω–∞–Ω–∏–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞

üîó –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start
    """
    
    await message.answer(help_text)


@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π:",
        reply_markup=keyboard
    )


@dp.message(Command("open"))
async def cmd_open(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /open"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    
    await message.answer(
        "–û—Ç–∫—Ä—ã–≤–∞—é –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π...",
        reply_markup=keyboard
    )


@dp.message()
async def echo_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –±–æ—Ç –º–æ–ª—á–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if message.chat.type in ["group", "supergroup"]:
        return
    
    # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=keyboard
    )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"üì¶ Build ID: {BUILD_ID}")
    logger.info(f"üìÖ Build Date: {BUILD_DATE}")
    logger.info(f"üè∑Ô∏è  {BUILD_MARKER}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not os.getenv("TELEGRAM_BOT_TOKEN"):
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
