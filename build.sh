#!/bin/bash

# BuildKit –æ—Ç–∫–ª—é—á–µ–Ω - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç buildx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
# export DOCKER_BUILDKIT=1
# export COMPOSE_DOCKER_CLI_BUILD=1

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ Docker –æ–±—Ä–∞–∑–æ–≤ Pair Helper
set -e

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É Docker –æ–±—Ä–∞–∑–æ–≤ Pair Helper —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ Dockerfile..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
error() { echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: $1${NC}"; exit 1; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "docker-compose.yml" ]; then
    error "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞."
fi

# ===============================================
# –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–ï–†–ï–î –°–ë–û–†–ö–û–ô
# ===============================================

# ============================
# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
# ============================
SKIP_SECURITY=0
USE_CACHE=1
SELECTED_SERVICES=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    --skip-security-checks)
      SKIP_SECURITY=1
      shift
      ;;
    --no-cache)
      USE_CACHE=0
      shift
      ;;
    --services=*)
      IFS=',' read -r -a SELECTED_SERVICES <<< "${1#*=}" # comma-separated list
      shift
      ;;
    --only=*)
      IFS=',' read -r -a SELECTED_SERVICES <<< "${1#*=}"
      shift
      ;;
    -h|--help)
      echo "Usage: ./build.sh [--skip-security-checks] [--no-cache] [--services=backend,bot,frontend,admin]"
      exit 0
      ;;
    *)
      echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"; exit 1;;
  esac
done

if [[ $SKIP_SECURITY -eq 1 ]]; then
    warning "–ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø–æ —Ñ–ª–∞–≥—É --skip-security-checks"
    warning "–ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –¢–û–õ–¨–ö–û –í –≠–ö–°–¢–†–ï–ù–ù–´–• –°–õ–£–ß–ê–Ø–•!"
    echo ""
else
    info "–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    info "(–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --skip-security-checks –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
if [ ! -f ".env" ]; then
    warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!"
else
    info "–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ .env –Ω–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö/—Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    check_env_var() {
        local var_name=$1
        local var_value=$(grep "^${var_name}=" .env 2>/dev/null | cut -d'=' -f2- || echo "")
        
        if [ -z "$var_value" ]; then
            warning "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var_name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env"
            return 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ/—Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –Ω–∞ —Å–∞–º —Ñ–∞–∫—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ .env)
        return 0
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if check_env_var "SECRET_KEY" && check_env_var "TELEGRAM_BOT_TOKEN" && check_env_var "DATABASE_URL"; then
        success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ –≤ Git
info "–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ Git..."
if git log --oneline --all --full-history -- deploy/stack.yml 2>/dev/null | head -5 | grep -q .; then
    if git show HEAD:deploy/stack.yml 2>/dev/null | grep -q "Passw0rd\|8239508680"; then
        warning "–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–µ–∫—Ä–µ—Ç—ã –≤ stack.yml. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
if command -v docker &> /dev/null; then
    info "Docker –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä–∫—É..."
else
    error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –¥–ª—è —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤."
fi

    success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"
    info "üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: .env —Ñ–∞–π–ª—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
    info "    –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö/–¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."
    echo ""
fi

# –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–±–æ—Ä–∫–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
BUILD_DATE_ARG=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
BUILD_ID=$(date +%s)_$(head -c 8 /dev/urandom | base64 | tr -d '/' | tr -d '+' | head -c 8)
BUILD_MARKER="BUILD_${BUILD_ID}_DEPLOYED"

info "–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: $BUILD_DATE_ARG"
info "ID —Å–±–æ—Ä–∫–∏: $BUILD_ID"
info "–ú–µ—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö: $BUILD_MARKER"

# Registry URL
REGISTRY_URL="192.168.2.228:5000"
PROJECT_NAME="pair-helper"

info "–°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑—ã..."

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏
ALL_SERVICES=(backend bot frontend admin)
if [[ ${#SELECTED_SERVICES[@]} -eq 0 ]]; then
  SERVICES_TO_BUILD=("${ALL_SERVICES[@]}")
else
  SERVICES_TO_BUILD=("${SELECTED_SERVICES[@]}")
fi

# –§–ª–∞–≥ –∫–µ—à–∞ –¥–ª—è docker build
BUILD_CACHE_ARGS=()
if [[ $USE_CACHE -eq 0 ]]; then
  BUILD_CACHE_ARGS+=("--no-cache")
  warning "–°–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤: ${SERVICES_TO_BUILD[*]}"
fi

build_service() {
  local svc=$1
  local ctx="./$svc"
  local tag="${PROJECT_NAME}-${svc}:latest"
  info "–°–æ–±–∏—Ä–∞–µ–º ${svc^}..."
  docker build --network host \
    "${BUILD_CACHE_ARGS[@]}" \
    --build-arg BUILD_DATE=$BUILD_DATE_ARG \
    --build-arg BUILD_ID=$BUILD_ID \
    --build-arg BUILD_MARKER=$BUILD_MARKER \
    -t "$tag" "$ctx"
}

for svc in "${SERVICES_TO_BUILD[@]}"; do
  build_service "$svc"
done

success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π registry
info "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–∑—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π registry..."

push_service() {
  local svc=$1
  local local_tag="${PROJECT_NAME}-${svc}:latest"
  local remote_tag="${REGISTRY_URL}/${PROJECT_NAME}-${svc}:latest"
  docker tag "$local_tag" "$remote_tag"
  docker push "$remote_tag"
}

for svc in "${SERVICES_TO_BUILD[@]}"; do
  push_service "$svc"
done

success "–û–±—Ä–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π registry"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ TrueNAS API
info "–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —á–µ—Ä–µ–∑ TrueNAS API..."

if curl -s -X POST http://192.168.2.228:8080/v1/update \
  -H "Authorization: Bearer dummy" > /dev/null; then
    success "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
else
    warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —á–µ—Ä–µ–∑ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TrueNAS."
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è..."
info "–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –º–µ—Ç–∫–æ–π: $BUILD_MARKER"
sleep 15  # –î–∞–µ–º –≤—Ä–µ–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è

# –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≥–¥–µ –∑–∞–ø—É—â–µ–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
REMOTE_SERVER="192.168.2.228"

# –§—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π API
check_remote_containers() {
    info "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TrueNAS API (–∫–æ—Ç–æ—Ä—ã–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    if curl -s http://$REMOTE_SERVER:8080/v1/status --max-time 5 >/dev/null 2>&1; then
        success "TrueNAS API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "TrueNAS API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∫–∏ –±–∏–ª–¥–∞ –≤ –ª–æ–≥–∞—Ö
check_build_marker_in_logs() {
    info "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –º–µ—Ç–∫–∞ –±–∏–ª–¥–∞ –≤ –ª–æ–≥–∞—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏
    if command -v python3 &> /dev/null && [ -f "tests/check_backend_logs.py" ]; then
        info "–ò—â–µ–º –º–µ—Ç–∫—É '$BUILD_MARKER' –≤ –ª–æ–≥–∞—Ö backend..."
        if timeout 30 python3 -c "
import subprocess
import sys
import time

# –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–µ—Ç–∫—É –≤ –ª–æ–≥–∞—Ö
for i in range(6):  # 6 –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5 —Å–µ–∫
    try:
        result = subprocess.run([
            'python3', 'tests/check_backend_logs.py'
        ], capture_output=True, text=True, timeout=10)
        
        if '$BUILD_MARKER' in result.stdout:
            print('‚úÖ –ú–µ—Ç–∫–∞ –±–∏–ª–¥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–≥–∞—Ö!')
            sys.exit(0)
        else:
            print(f'‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {i+1}/6: –º–µ—Ç–∫–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞...')
            time.sleep(5)
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        time.sleep(5)

print('‚ö†Ô∏è  –ú–µ—Ç–∫–∞ –±–∏–ª–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–≥–∞—Ö –∑–∞ 30 —Å–µ–∫—É–Ω–¥')
sys.exit(1)
" 2>/dev/null; then
            success "–ú–µ—Ç–∫–∞ –±–∏–ª–¥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–≥–∞—Ö! –ù–æ–≤—ã–π –±–∏–ª–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç."
        else
            warning "–ú–µ—Ç–∫–∞ –±–∏–ª–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–≥–∞—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –µ—â–µ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å."
            info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—Ä—É—á–Ω—É—é: python3 tests/check_backend_logs.py"
        fi
    else
        warning "–ù–µ —É–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é:"
        info "  python3 tests/check_backend_logs.py | grep '$BUILD_MARKER'"
    fi
}

# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_remote_containers

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫—É –±–∏–ª–¥–∞ –≤ –ª–æ–≥–∞—Ö
check_build_marker_in_logs

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π backend
info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π backend..."
if curl -s http://$REMOTE_SERVER:8000/health --max-time 10 | grep -q "healthy" 2>/dev/null; then
    success "Backend –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)"
else
    warning "Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —á–µ—Ä–µ–∑: python3 tests/check_backend_logs.py"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π frontend
info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π frontend..."
if curl -s http://$REMOTE_SERVER:3000 --max-time 10 >/dev/null 2>&1; then
    success "Frontend –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)"
else
    warning "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —á–µ—Ä–µ–∑: python3 tests/check_frontend_logs.py"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ nginx —É–±—Ä–∞–Ω—ã - –æ–Ω–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
info "–í–Ω–µ—à–Ω–∏–µ URL –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã (nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)"

echo ""
success "üéâ –°–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Pair Helper –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
echo ""
info "üè∑Ô∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–¥–µ:"
echo "   ‚Ä¢ Build ID: $BUILD_ID"
echo "   ‚Ä¢ Build Date: $BUILD_DATE" 
echo "   ‚Ä¢ Build Marker: $BUILD_MARKER"
echo ""
info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo ""
echo "   üè† –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (–ø—Ä—è–º—ã–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º):"
echo "     ‚Ä¢ Backend:  http://$REMOTE_SERVER:8000/health"
echo "     ‚Ä¢ Frontend: http://$REMOTE_SERVER:3000/"
echo "     ‚Ä¢ Admin:    http://$REMOTE_SERVER:5001/"
echo ""
echo "   üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏:"
echo "     ‚Ä¢ Portainer: https://$REMOTE_SERVER:31015"
echo "     ‚Ä¢ –õ–æ–≥–∏ backend: python3 tests/check_backend_logs.py"
echo "     ‚Ä¢ –õ–æ–≥–∏ bot: python3 tests/check_bot_logs.py"
echo "     ‚Ä¢ –õ–æ–≥–∏ frontend: python3 tests/check_frontend_logs.py"
