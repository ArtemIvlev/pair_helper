import { useEffect, useState } from 'react'
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'
import './App.css'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import Home from './components/Home'
import DailyQuestion from './components/DailyQuestion'
import Mood from './components/Mood'
import Settings from './components/Settings'
import Navigation from './components/Navigation'
import Registration from './components/Registration'

// –¢–∏–ø—ã
declare global {
  interface Window {
    Telegram: {
      WebApp: {
        initData: string
        initDataUnsafe: {
          user?: {
            id: number
            first_name: string
            last_name?: string
            username?: string
          }
        }
        themeParams: {
          bg_color?: string
          text_color?: string
          hint_color?: string
          link_color?: string
          button_color?: string
          button_text_color?: string
        }
        viewportHeight: number
        viewportStableHeight: number
        headerColor: string
        backgroundColor: string
        isExpanded: boolean
        ready: () => void
        expand: () => void
        close: () => void
        showAlert: (message: string) => void
      }
    }
  }
}

function App() {
  const [isTelegramWebApp, setIsTelegramWebApp] = useState(false)
  const [user, setUser] = useState<any>(null)
  const [registeredUser, setRegisteredUser] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [isFullscreen, setIsFullscreen] = useState(false)

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
    if (window.Telegram?.WebApp) {
      setIsTelegramWebApp(true)
      window.Telegram.WebApp.ready()
      window.Telegram.WebApp.expand()
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–∫—Ä—ã—Ç–∏—è
      const viewportHeight = window.Telegram.WebApp.viewportHeight
      const viewportStableHeight = window.Telegram.WebApp.viewportStableHeight
      const isExpanded = window.Telegram.WebApp.isExpanded
      
      // –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ viewport –º–µ–Ω—å—à–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É
      setIsFullscreen(viewportHeight < viewportStableHeight || isExpanded)
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (window.Telegram.WebApp.initDataUnsafe.user) {
        const telegramUser = window.Telegram.WebApp.initDataUnsafe.user
        setUser(telegramUser)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        checkUserRegistration(telegramUser.id)
      }
    }
  }, [])

  const checkUserRegistration = async (telegramId: number) => {
    try {
      const response = await fetch(`https://gallery.homoludens.photos/pulse_of_pair/api/v1/users/me?telegram_id=${telegramId}`)
      if (response.ok) {
        const userData = await response.json()
        setRegisteredUser(userData)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä invite –≤ URL –∏–ª–∏ startapp –æ—Ç Telegram
        const urlParams = new URLSearchParams(window.location.search)
        const inviteCode = urlParams.get('invite') || urlParams.get('tgWebAppStartParam')?.replace('invite_', '')
        
        if (inviteCode) {
          console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', inviteCode)
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await useInvitation(inviteCode, telegramId)
        }
      }
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (404), –æ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
    } finally {
      setLoading(false)
    }
  }

  const useInvitation = async (inviteCode: string, telegramId: number) => {
    try {
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:', inviteCode, '–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId)
      const response = await fetch(`https://gallery.homoludens.photos/pulse_of_pair/api/v1/invitations/${inviteCode}/use?invitee_telegram_id=${telegramId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      })
      
      if (response.ok) {
        console.log('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ!')
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (window.Telegram?.WebApp?.showAlert) {
          window.Telegram.WebApp.showAlert('üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø–∞—Ä–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ.')
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É
        setTimeout(() => {
          checkUserRegistration(telegramId)
        }, 1000)
      } else {
        const error = await response.json()
        console.error('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error)
        if (window.Telegram?.WebApp?.showAlert) {
          window.Telegram.WebApp.showAlert(`‚ùå –û—à–∏–±–∫–∞: ${error.detail}`)
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error)
    }
  }

  const handleRegistrationComplete = (userData: any) => {
    setRegisteredUser(userData)
  }

  if (!isTelegramWebApp) {
    return (
      <div className="container">
        <div className="header">
          <h1>Pair Helper</h1>
          <p>–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram</p>
        </div>
      </div>
    )
  }

  if (loading) {
    return (
      <div className={`main-content ${isFullscreen ? 'fullscreen' : 'embedded'}`}>
        <div className="container">
          <div className="header">
            <h1>–ó–∞–≥—Ä—É–∑–∫–∞...</h1>
            <p>–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å</p>
          </div>
        </div>
      </div>
    )
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  if (!registeredUser) {
    return (
      <Router>
        <div className={`tg-app ${isFullscreen ? 'fullscreen' : 'embedded'}`}>
          <Routes>
            <Route path="/pulse_of_pair/register" element={
              <Registration 
                user={user} 
                onRegistrationComplete={handleRegistrationComplete}
              />
            } />
            <Route path="*" element={<Navigate to="/pulse_of_pair/register" replace />} />
          </Routes>
        </div>
      </Router>
    )
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  return (
    <Router>
      <div className={`tg-app ${isFullscreen ? 'fullscreen' : 'embedded'}`}>
        <Routes>
          <Route path="/pulse_of_pair/" element={<Home user={registeredUser} />} />
          <Route path="/pulse_of_pair/question" element={<DailyQuestion />} />
          <Route path="/pulse_of_pair/mood" element={<Mood />} />
          <Route path="/pulse_of_pair/settings" element={<Settings user={registeredUser} />} />
          <Route path="*" element={<Navigate to="/pulse_of_pair/" replace />} />
        </Routes>
        <Navigation />
      </div>
    </Router>
  )
}

export default App
