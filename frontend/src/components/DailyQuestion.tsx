import React, { useState, useEffect } from 'react'
import { getApiUrl } from '../config'

interface Question {
  id: number
  number: number
  text: string
  category: string
  partner_answered: boolean
  user_answered: boolean
}



const DailyQuestion: React.FC = () => {
  const [question, setQuestion] = useState<Question | null>(null)
  const [answer, setAnswer] = useState('')
  const [loading, setLoading] = useState(true)
  const [submitting, setSubmitting] = useState(false)
  const [submitted, setSubmitted] = useState(false)
  const [error, setError] = useState('')
  const [recent, setRecent] = useState<{ id: number; number: number; text: string; category: string; partner_answered: boolean; user_answered: boolean }[]>([])
  const [selected, setSelected] = useState<null | {
    question: Question
    user_answer: { id: number; question_id: number; answer_text: string; created_at: string } | null
    partner_answer: { id: number; question_id: number; answer_text: string; created_at: string } | null
    partner_name: string
  }>(null)
  const [notifying, setNotifying] = useState(false)
  const [notifySuccess, setNotifySuccess] = useState<string>('')
  const [notifyCooldown, setNotifyCooldown] = useState<number | null>(null)

  const fetchCurrentQuestion = async () => {
    try {
      const initData = (window as any).Telegram?.WebApp?.initData
      console.log('DailyQuestion: initData =', initData)
      console.log('DailyQuestion: Telegram WebApp =', (window as any).Telegram?.WebApp)
      if (!initData) {
        setError('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –Ω–µ—Ç initData')
        setLoading(false)
        return
      }

      const response = await fetch(getApiUrl('/v1/questions/current'), {
        headers: {
          'X-Telegram-Init-Data': initData,
          'Content-Type': 'application/json'
        }
      })

      console.log('DailyQuestion: response status =', response.status)
      console.log('DailyQuestion: response ok =', response.ok)

      if (response.ok) {
        const data = await response.json()
        console.log('DailyQuestion: success data =', data)
        setQuestion(data)
        // –ü–æ–¥—Ç—è–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –º–∏–Ω–∏‚Äë–∏—Å—Ç–æ—Ä–∏–∏
        fetchRecent()
      } else if (response.status === 404) {
        const errorData = await response.json()
        console.log('DailyQuestion: 404 error =', errorData)
        setError(errorData.detail || '–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      } else {
        const errorText = await response.text()
        console.log('DailyQuestion: error status =', response.status, 'text =', errorText)
        setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ (${response.status})`)
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
    } finally {
      setLoading(false)
    }
  }

  const fetchRecent = async () => {
    try {
      const initData = (window as any).Telegram?.WebApp?.initData
      if (!initData) return
      const resp = await fetch(getApiUrl('/v1/questions/history?limit=5'), {
        headers: {
          'X-Telegram-Init-Data': initData,
          'Content-Type': 'application/json'
        }
      })
      if (resp.ok) {
        const items = await resp.json()
        // —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–∂–µ –ø—Ä–∏—Ö–æ–¥—è—Ç, –Ω–æ –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
        const mapped = (items || []).map((x: any) => ({
          id: x.question.id,
          number: x.question.number,
          text: x.question.text,
          category: x.question.category,
          partner_answered: x.partner_answered,
          user_answered: x.user_answered
        }))
        setRecent(mapped)
      }
    } catch {}
  }

  const notifyPartner = async () => {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
    if (notifying || notifyCooldown) return
    
    try {
      setNotifySuccess('')
      setError('')
      setNotifying(true)
      const initData = (window as any).Telegram?.WebApp?.initData
      if (!initData) {
        setError('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
        return
      }
      const resp = await fetch(getApiUrl('/v1/questions/notify_partner'), {
        method: 'POST',
        headers: {
          'X-Telegram-Init-Data': initData,
          'Content-Type': 'application/json'
        }
      })
      if (resp.ok) {
        const data = await resp.json()
        setNotifySuccess(data.message || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
        setNotifyCooldown(60)
        const interval = setInterval(() => {
          setNotifyCooldown(prev => {
            if (prev && prev > 1) {
              return prev - 1
            } else {
              clearInterval(interval)
              return null
            }
          })
        }, 1000)
        
      } else if (resp.status === 429) {
        // Rate limit - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const err = await resp.json().catch(() => ({}))
        setError(err.detail || '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        const match = err.detail?.match(/(\d+) –º–∏–Ω—É—Ç/)
        if (match) {
          const minutes = parseInt(match[1])
          setNotifyCooldown(minutes * 60)
          const interval = setInterval(() => {
            setNotifyCooldown(prev => {
              if (prev && prev > 1) {
                return prev - 1
              } else {
                clearInterval(interval)
                return null
              }
            })
          }, 1000)
        }
      } else {
        const err = await resp.json().catch(() => ({}))
        setError(err.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
      }
    } catch (e) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    } finally {
      setNotifying(false)
    }
  }

  const fetchAnswers = async (questionId: number) => {
    try {
      const initData = (window as any).Telegram?.WebApp?.initData
      const response = await fetch(getApiUrl(`/v1/questions/answers/${questionId}`), {
        headers: {
          'X-Telegram-Init-Data': initData,
          'Content-Type': 'application/json'
        }
      })
      if (response.ok) {
        const data = await response.json()
        setSelected(data)
      }
    } catch {}
  }

  useEffect(() => {
    fetchCurrentQuestion()
  }, [])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!answer.trim() || !question) return

    setSubmitting(true)
    setError('')

    try {
      const initData = (window as any).Telegram?.WebApp?.initData
      const response = await fetch(getApiUrl('/v1/questions/answer'), {
        method: 'POST',
        headers: {
          'X-Telegram-Init-Data': initData,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          question_id: question.id,
          answer_text: answer.trim()
        })
      })

      if (response.ok) {
        setSubmitted(true)
        setAnswer('')
        // –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –º–∏–Ω–∏‚Äë–∏—Å—Ç–æ—Ä–∏—é
        fetchRecent()
      } else {
        const errorData = await response.json()
        setError(errorData.detail || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞')
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
    } finally {
      setSubmitting(false)
    }
  }

  if (loading) {
    return (
      <div className="main-content">
        <div className="container">
          <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–∞...</div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="main-content">
        <div className="container">
          <div className="header">
            <h1>–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä</h1>
            <p>–£–∑–Ω–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ª—É—á—à–µ</p>
          </div>
          <div className="card card-elevated fade-in">
            <div className="error" style={{ textAlign: 'center', padding: '20px' }}>
              <h3>üòî</h3>
              <p style={{ color: 'var(--tg-theme-destructive-text-color)', marginBottom: '16px' }}>
                {error}
              </p>
              <button onClick={fetchCurrentQuestion} className="btn btn-primary">
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (!question) {
    return (
      <div className="main-content">
        <div className="container">
          <div className="header">
            <h1>–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä</h1>
            <p>–£–∑–Ω–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ª—É—á—à–µ</p>
          </div>
          <div className="card card-elevated fade-in">
            <div style={{ textAlign: 'center', padding: '40px' }}>
              <h3>üéâ</h3>
              <h2 style={{ marginBottom: '16px' }}>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h2>
              <p style={{ marginBottom: '24px' }}>
                –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã! –°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ.
              </p>
              <button onClick={fetchCurrentQuestion} className="btn btn-primary">
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="main-content">
      <div className="container">
        <div className="header">
          <h1>–í–æ–ø—Ä–æ—Å –¥–ª—è –ø–∞—Ä</h1>
          <p>–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º</p>
        </div>

        <div className="card card-elevated fade-in">
          <div style={{ marginBottom: '16px', display: 'flex', justifyContent: 'flex-end', alignItems: 'center' }}>
            <span className="badge" style={{ backgroundColor: 'var(--tg-theme-secondary-bg-color)' }}>
              {question.category}
            </span>
          </div>

          <div style={{ marginBottom: '16px' }}>
            <h3 style={{ marginBottom: '8px' }}>ü§î</h3>
            <p style={{ fontSize: '18px', lineHeight: '1.5', marginBottom: '16px' }}>
              {question.text}
            </p>
            
            {question.partner_answered && (
              <div style={{ 
                padding: '12px', 
                backgroundColor: 'var(--tg-theme-secondary-bg-color)', 
                borderRadius: '8px',
                marginBottom: '16px'
              }}>
                <small style={{ color: 'var(--tg-theme-accent-text-color)' }}>
                  ‚úÖ –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
                </small>
              </div>
            )}
          </div>

          {!submitted && !question.user_answered ? (
            <form onSubmit={handleSubmit}>
              <div className="form-group">
                <label htmlFor="answer">–í–∞—à –æ—Ç–≤–µ—Ç:</label>
                <textarea
                  id="answer"
                  value={answer}
                  onChange={(e) => setAnswer(e.target.value)}
                  placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏..."
                  required
                  disabled={submitting}
                  style={{ minHeight: '120px' }}
                />
              </div>
              
              {error && (
                <div style={{ 
                  color: 'var(--tg-theme-destructive-text-color)', 
                  marginBottom: '16px',
                  padding: '8px',
                  backgroundColor: 'rgba(255, 0, 0, 0.1)',
                  borderRadius: '4px'
                }}>
                  {error}
                </div>
              )}

              <button 
                type="submit" 
                className="btn btn-primary"
                disabled={submitting || !answer.trim()}
              >
                {submitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç'}
              </button>
            </form>
          ) : (
            <div className="success" style={{ textAlign: 'center' }}>
              <h3>‚úÖ –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≤–æ–ø—Ä–æ—Å</h3>
              <p style={{ marginBottom: '12px' }}>–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º.</p>
              {/* –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª */}
              {question && question.user_answered && !question.partner_answered && (
                <div>
                  <button 
                    onClick={notifyPartner}
                    className="btn btn-primary"
                    disabled={notifying || notifyCooldown !== null}
                  >
                    {notifying ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : 
                     notifyCooldown ? 
                       `–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ ${Math.floor(notifyCooldown / 60)}:${(notifyCooldown % 60).toString().padStart(2, '0')}` : 
                       '–ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä—É –æ—Ç–≤–µ—Ç–∏—Ç—å'}
                  </button>
                  {notifySuccess && (
                    <div style={{ marginTop: 8, color: 'var(--tg-theme-accent-text-color)' }}>{notifySuccess}</div>
                  )}
                  {error && (
                    <div style={{ marginTop: 8, color: '#ff6b6b' }}>{error}</div>
                  )}
                </div>
              )}
            </div>
          )}
        </div>

        {/* –ú–∏–Ω–∏‚Äë–∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ */}
        {recent.length > 0 && (
          <div className="card card-elevated fade-in" style={{ marginTop: '16px' }}>
            <h3 style={{ marginBottom: '12px' }}>üïë –ù–µ–¥–∞–≤–Ω–∏–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã</h3>
            <div style={{ display: 'grid', gap: '8px' }}>
              {recent.map((r) => (
                <div key={r.id} onClick={() => fetchAnswers(r.id)} style={{
                  padding: '10px',
                  backgroundColor: 'var(--tg-theme-secondary-bg-color)',
                  borderRadius: '8px',
                  border: '1px solid var(--tg-theme-hint-color)',
                  cursor: 'pointer'
                }}>
                  <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '6px' }}>
                    <span className="badge" style={{ backgroundColor: 'var(--tg-theme-hint-color)', color: 'white' }}>{r.category}</span>
                  </div>
                  <div style={{ fontSize: '13px', color: 'var(--tg-theme-hint-color)' }}>
                    {r.text.length > 90 ? `${r.text.slice(0, 90)}...` : r.text}
                  </div>
                  <div style={{ marginTop: '6px', fontSize: '12px' }}>
                    <span style={{ color: r.user_answered ? 'var(--tg-theme-accent-text-color)' : 'var(--tg-theme-hint-color)' }}>–í—ã: {r.user_answered ? '‚úÖ' : '‚Äî'}</span>
                    <span style={{ marginLeft: 10, color: r.partner_answered ? '#f093fb' : 'var(--tg-theme-hint-color)' }}>–ü–∞—Ä—Ç–Ω–µ—Ä: {r.partner_answered ? '‚úÖ' : '‚Äî'}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ */}
        {selected && (
          <div 
            role="dialog"
            aria-modal="true"
            onClick={() => setSelected(null)}
            style={{
              position: 'fixed',
              inset: 0,
              background: 'rgba(0,0,0,0.45)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              zIndex: 1000,
              padding: '16px'
            }}
          >
            <div
              onClick={(e) => e.stopPropagation()}
              style={{
                width: '100%',
                maxWidth: '640px',
                background: 'var(--tg-theme-bg-color)',
                borderRadius: '16px',
                boxShadow: '0 12px 40px rgba(0,0,0,0.35)',
                border: '1px solid var(--tg-theme-secondary-bg-color)'
              }}
            >
              <div style={{ padding: '16px 16px 0 16px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <div>
                  <div style={{ fontWeight: 700 }}>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è</div>
                  <div style={{ fontSize: '12px', color: 'var(--tg-theme-hint-color)' }}>{selected.question.category}</div>
                </div>
                <button className="btn btn-secondary" onClick={() => setSelected(null)}>–ó–∞–∫—Ä—ã—Ç—å</button>
              </div>
              <div style={{ padding: '0 16px 16px 16px' }}>
                <p style={{ fontSize: '14px', marginTop: '12px' }}>{selected.question.text}</p>
                <div style={{ display: 'grid', gap: '12px', marginTop: '12px' }}>
                  {selected.user_answer && (
                    <div style={{ padding: '12px', background: 'var(--tg-theme-secondary-bg-color)', borderRadius: '8px', border: '2px solid var(--tg-theme-accent-text-color)' }}>
                      <strong style={{ color: 'var(--tg-theme-accent-text-color)' }}>–í–∞—à –æ—Ç–≤–µ—Ç</strong>
                      <div style={{ marginTop: '6px' }}>{selected.user_answer.answer_text}</div>
                      <small style={{ color: 'var(--tg-theme-hint-color)' }}>{new Date(selected.user_answer.created_at).toLocaleString('ru-RU')}</small>
                    </div>
                  )}
                  {selected.partner_answer ? (
                    <div style={{ padding: '12px', background: 'var(--tg-theme-secondary-bg-color)', borderRadius: '8px', border: '2px solid #f093fb' }}>
                      <strong style={{ color: '#f093fb' }}>–û—Ç–≤–µ—Ç {selected.partner_name}</strong>
                      <div style={{ marginTop: '6px' }}>{selected.partner_answer.answer_text}</div>
                      <small style={{ color: 'var(--tg-theme-hint-color)' }}>{new Date(selected.partner_answer.created_at).toLocaleString('ru-RU')}</small>
                    </div>
                  ) : (
                    <div style={{ padding: '12px', background: 'var(--tg-theme-secondary-bg-color)', borderRadius: '8px', border: '2px dashed var(--tg-theme-hint-color)', textAlign: 'center' }}>
                      <strong style={{ color: 'var(--tg-theme-hint-color)' }}>–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–∫–∞ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª</strong>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default DailyQuestion
