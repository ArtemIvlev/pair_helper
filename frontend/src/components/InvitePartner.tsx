import React, { useState, useEffect } from 'react'
import { getApiUrl } from '../config'

interface InvitePartnerProps {
  user: any
}

interface Pair {
  id: number
  user1_id: number
  user2_id: number
  created_at: string
  user1?: {
    id: number
    first_name: string
    telegram_id: number
  }
  user2?: {
    id: number
    first_name: string
    telegram_id: number
  }
}

const InvitePartner: React.FC<InvitePartnerProps> = ({ user }) => {
  const [loading, setLoading] = useState(false)
  const [inviteLink, setInviteLink] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [pair, setPair] = useState<Pair | null>(null)
  const [checkingPair, setCheckingPair] = useState(true)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkExistingPair()
  }, [user])

  const checkExistingPair = async () => {
    if (!user?.id) return

    try {
      const response = await fetch(getApiUrl('/v1/pair/'), {
        headers: {
          'Content-Type': 'application/json',
          'X-Telegram-User-ID': user.telegram_id.toString()
        }
      })

      if (response.ok) {
        const pairData = await response.json()
        setPair(pairData)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä—ã:', error)
    } finally {
      setCheckingPair(false)
    }
  }

  const generateInvite = async () => {
    if (!user?.telegram_id) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    setLoading(true)
    setError(null)
    setInviteLink(null)

    try {
      const response = await fetch(getApiUrl(`/v1/invitations/generate?inviter_telegram_id=${user.telegram_id}`), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      })

      if (response.ok) {
        const data = await response.json()
                            const link = `https://t.me/PulseOfPair_Bot/pulse_of_pair?startapp=invite_${data.code}`
        setInviteLink(link)
      } else {
        const errorData = await response.json()
        setError(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error)
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è')
    } finally {
      setLoading(false)
    }
  }

  const copyToClipboard = async () => {
    if (inviteLink) {
      try {
        await navigator.clipboard.writeText(inviteLink)
        if (window.Telegram?.WebApp?.showAlert) {
          window.Telegram.WebApp.showAlert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!')
        } else {
          alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!')
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏')
      }
    }
  }

  const shareViaTelegram = () => {
    if (inviteLink) {
      const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(inviteLink)}&text=${encodeURIComponent('–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫–æ –º–Ω–µ –≤ –ü—É–ª—å—Å –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ø–∞—Ä! üíï')}`
      window.open(shareUrl, '_blank')
    }
  }

  // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (checkingPair) {
    return (
      <div className="invite-partner">
        <div className="card">
          <h3>üé´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞</h3>
          <p>–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –ø–∞—Ä—É...</p>
        </div>
      </div>
    )
  }

  // –ï—Å–ª–∏ –ø–∞—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
  if (pair) {
    const partner = pair.user1_id === user.id ? pair.user2 : pair.user1
    const pairCreatedDate = new Date(pair.created_at).toLocaleDateString('ru-RU')

    return (
      <div className="invite-partner">
        <div className="card">
          <h3>üíï –í–∞—à–∞ –ø–∞—Ä–∞</h3>
          <div className="pair-info">
            <div className="partner-details">
              <h4>–ü–∞—Ä—Ç–Ω–µ—Ä: {partner?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</h4>
              <p>–ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {pairCreatedDate}</p>
            </div>
            
            <div className="pair-status">
              <span className="status-badge">‚úÖ –ê–∫—Ç–∏–≤–Ω–∞</span>
            </div>
          </div>
          
        </div>
      </div>
    )
  }

  // –ï—Å–ª–∏ –ø–∞—Ä—ã –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  return (
    <div className="invite-partner">
      <div className="card">
        <h3>üé´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞</h3>
        <p>–°–æ–∑–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</p>
        
        {!inviteLink ? (
          <button 
            className="btn btn-primary" 
            onClick={generateInvite}
            disabled={loading}
          >
            {loading ? '–°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É...' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'}
          </button>
        ) : (
          <div className="invite-result">
            <div className="invite-link">
              <label>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:</label>
              <div className="link-container">
                <input 
                  type="text" 
                  value={inviteLink} 
                  readOnly 
                  className="link-input"
                />
                <button 
                  className="btn btn-secondary copy-btn"
                  onClick={copyToClipboard}
                  title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"
                >
                  üìã
                </button>
              </div>
            </div>
            
            <div className="share-actions">
              <button 
                className="btn btn-primary"
                onClick={shareViaTelegram}
              >
                üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram
              </button>
              
              <button 
                className="btn btn-secondary"
                onClick={() => setInviteLink(null)}
              >
                –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
              </button>
            </div>
            
            <div className="invite-info">
              <p><strong>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong></p>
              <ol>
                <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É</li>
                <li>–ü–∞—Ä—Ç–Ω–µ—Ä –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ø–∞–¥–µ—Ç –≤ –±–æ—Ç–∞</li>
                <li>–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–µ—Ç–µ –ø–∞—Ä–æ–π</li>
              </ol>
              <p><em>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 7 –¥–Ω–µ–π</em></p>
            </div>
          </div>
        )}
        
        {error && (
          <div className="error-message">
            ‚ùå {error}
          </div>
        )}
      </div>
    </div>
  )
}

export default InvitePartner
