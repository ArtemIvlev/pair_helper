import React, { useState, useEffect } from 'react'
import { getApiUrl } from '../config'

interface MoodData {
  id: number
  user_id: number
  date: string
  mood_code: string
  note?: string
  user: {
    first_name: string
    last_name?: string
  }
}

const Mood: React.FC = () => {
  const [selectedMood, setSelectedMood] = useState('')
  const [note, setNote] = useState('')
  const [submitted, setSubmitted] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [recentMoods, setRecentMoods] = useState<MoodData[]>([])
  const [loadingMoods, setLoadingMoods] = useState(false)

  const moods = [
    { code: 'joyful', emoji: 'üòä', text: '–†–∞–¥–æ—Å—Ç–Ω—ã–π' },
    { code: 'calm', emoji: 'üòå', text: '–°–ø–æ–∫–æ–π–Ω—ã–π' },
    { code: 'tired', emoji: 'üò¥', text: '–£—Å—Ç–∞–≤—à–∏–π' },
    { code: 'anxious', emoji: 'üò∞', text: '–¢—Ä–µ–≤–æ–∂–Ω—ã–π' },
    { code: 'sad', emoji: 'üò¢', text: '–ì—Ä—É—Å—Ç–Ω—ã–π' },
    { code: 'irritable', emoji: 'üò§', text: '–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–π' },
    { code: 'grateful', emoji: 'üôè', text: '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω—ã–π' },
  ]

  const moodEmojis: { [key: string]: string } = {
    'joyful': 'üòä',
    'calm': 'üòå',
    'tired': 'üò¥',
    'anxious': 'üò∞',
    'sad': 'üò¢',
    'irritable': 'üò§',
    'grateful': 'üôè'
  }

  const loadRecentMoods = async () => {
    setLoadingMoods(true)
    try {
      const initData = (window as any).Telegram?.WebApp?.initData
      if (!initData) return

      const response = await fetch(getApiUrl('/v1/mood/'), {
        headers: {
          'X-Telegram-Init-Data': initData
        }
      })

      if (response.ok) {
        const moods = await response.json()
        setRecentMoods(moods.slice(0, 6)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:', err)
    } finally {
      setLoadingMoods(false)
    }
  }

  useEffect(() => {
    loadRecentMoods()
  }, [])

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    const today = new Date()
    const yesterday = new Date(today)
    yesterday.setDate(yesterday.getDate() - 1)
    
    if (date.toDateString() === today.toDateString()) {
      return '–°–µ–≥–æ–¥–Ω—è'
    } else if (date.toDateString() === yesterday.toDateString()) {
      return '–í—á–µ—Ä–∞'
    } else {
      return date.toLocaleDateString('ru-RU', { 
        day: 'numeric', 
        month: 'short' 
      })
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!selectedMood) return

    setLoading(true)
    setError('')

    try {
      const initData = (window as any).Telegram?.WebApp?.initData
      if (!initData) {
        setError('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
        return
      }

      const response = await fetch(getApiUrl('/v1/mood/'), {
        method: 'POST',
        headers: {
          'X-Telegram-Init-Data': initData,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          mood_code: selectedMood,
          note: note.trim() || null
        })
      })

      if (response.ok) {
        setSubmitted(true)
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        await loadRecentMoods()
      } else {
        const errorData = await response.json()
        setError(errorData.detail || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è')
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="main-content">
      <div className="container">
        <div className="header">
        <h1>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–Ω—è</h1>
        <p>–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?</p>
      </div>

      {!submitted ? (
        <div className="card card-elevated fade-in">
          {error && (
            <div style={{ 
              color: 'var(--tg-theme-destructive-text-color)', 
              fontSize: '14px', 
              textAlign: 'center', 
              padding: '12px',
              marginBottom: '16px',
              background: 'var(--tg-theme-secondary-bg-color)',
              borderRadius: '8px'
            }}>
              {error}
            </div>
          )}
          <form onSubmit={handleSubmit}>
            <div className="mood-grid">
              {moods.map((mood) => (
                <div
                  key={mood.code}
                  className={`mood-item ${selectedMood === mood.code ? 'selected' : ''}`}
                  onClick={() => setSelectedMood(mood.code)}
                >
                  <div className="mood-emoji">{mood.emoji}</div>
                  <div className="mood-text">{mood.text}</div>
                </div>
              ))}
            </div>

            <div className="form-group">
              <label htmlFor="note">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
              <textarea
                id="note"
                value={note}
                onChange={(e) => setNote(e.target.value)}
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ—ë–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏..."
              />
            </div>

            <button 
              type="submit" 
              className="btn btn-primary"
              disabled={!selectedMood || loading}
            >
              {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'}
            </button>
          </form>
        </div>
      ) : (
        <div className="card card-elevated fade-in">
          <div className="success">
            <h3>‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</h3>
            <p>–¢–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä —Å–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.</p>
          </div>
        </div>
      )}

      {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è */}
      <div className="card card-elevated fade-in" style={{ marginTop: '20px' }}>
        <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</h3>
        {loadingMoods ? (
          <div style={{ textAlign: 'center', padding: '20px' }}>
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        ) : recentMoods.length > 0 ? (
          <div className="recent-moods">
            {recentMoods.map((mood) => (
              <div key={mood.id} className="mood-entry">
                <div className="mood-entry-header">
                  <span className="mood-emoji-large">{moodEmojis[mood.mood_code] || 'üòä'}</span>
                  <div className="mood-entry-info">
                    <div className="mood-entry-name">
                      {mood.user.first_name} {mood.user.last_name || ''}
                    </div>
                    <div className="mood-entry-date">{formatDate(mood.date)}</div>
                  </div>
                </div>
                {mood.note && (
                  <div className="mood-entry-note">{mood.note}</div>
                )}
              </div>
            ))}
          </div>
        ) : (
          <div style={{ textAlign: 'center', padding: '20px', color: 'var(--text-secondary)' }}>
            <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π</p>
          </div>
        )}
      </div>
      </div>
    </div>
  )
}

export default Mood
