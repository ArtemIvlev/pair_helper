#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –±–æ—Ç–∞ Pair Helper
"""

import requests
import json
from urllib3.exceptions import InsecureRequestWarning
import urllib3
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ SSL
urllib3.disable_warnings(InsecureRequestWarning)

def get_auth_token(base_url, username, password):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        response = requests.post(
            f"{base_url}/api/auth",
            json={"Username": username, "Password": password},
            verify=False,
            timeout=10
        )
        if response.status_code == 200:
            return response.json().get("jwt")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def get_endpoints(base_url, token):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ endpoints"""
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(
            f"{base_url}/api/endpoints",
            headers=headers,
            verify=False,
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è endpoints: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ endpoints: {e}")
        return []

def get_containers(base_url, token, endpoint_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(
            f"{base_url}/api/endpoints/{endpoint_id}/docker/containers/json",
            headers=headers,
            verify=False,
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
        return []

def get_container_logs(base_url, token, endpoint_id, container_id, lines=100):
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(
            f"{base_url}/api/endpoints/{endpoint_id}/docker/containers/{container_id}/logs",
            params={"stdout": True, "stderr": True, "tail": lines},
            headers=headers,
            verify=False,
            timeout=30
        )
        if response.status_code == 200:
            return response.text
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {response.status_code}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}"

def main():
    print("ü§ñ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –±–æ—Ç–∞ Pair Helper...")
    print("=" * 60)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    base_url = "https://192.168.2.228:31015"
    username = os.getenv("PORTAINER_USERNAME", "admin")
    password = os.getenv("PORTAINER_PASSWORD", "admin")
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {username}/***")
    print(f"üîó URL: {base_url}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    token = get_auth_token(base_url, username, password)
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        return
    
    print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º endpoints
    print("2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ endpoints...")
    endpoints = get_endpoints(base_url, token)
    if not endpoints:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å endpoints")
        return
    
    # –ò—â–µ–º –Ω—É–∂–Ω—ã–π endpoint (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π)
    endpoint = endpoints[0] if endpoints else None
    if not endpoint:
        print("‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    endpoint_id = endpoint.get("Id")
    print(f"‚úÖ Endpoint –Ω–∞–π–¥–µ–Ω: {endpoint.get('Name', 'Unknown')} (ID: {endpoint_id})")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    print("3. –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–æ—Ç–∞...")
    containers = get_containers(base_url, token, endpoint_id)
    if not containers:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã")
        return
    
    # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–æ—Ç–∞
    bot_container = None
    for container in containers:
        names = container.get("Names", [])
        if any("pair-helper-bot" in name for name in names):
            bot_container = container
            break
    
    if not bot_container:
        print("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä pair-helper-bot –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    container_id = bot_container["Id"]
    container_name = bot_container["Names"][0] if bot_container["Names"] else "Unknown"
    container_status = bot_container.get("State", "Unknown")
    
    print(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω: {container_name}")
    print(f"   ID: {container_id[:12]}...")
    print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {container_status}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
    print("4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –±–æ—Ç–∞...")
    print("-" * 60)
    logs = get_container_logs(base_url, token, endpoint_id, container_id, lines=300)
    print(logs)
    print("-" * 60)
    
    print("‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()

