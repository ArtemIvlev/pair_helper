#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Pair Helper
–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏—Ö –ø–∞—Ä—ã –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏),
–ù–ï —Ç—Ä–æ–≥–∞—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–≤–æ–ø—Ä–æ—Å—ã –∏ –¥—Ä.). –ú–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ Telegram ID.

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
  - EXCLUDE_TG_IDS: comma-separated —Å–ø–∏—Å–æ–∫ Telegram ID, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï —É–¥–∞–ª—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "123,456")
"""

import requests
import urllib3
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PORTAINER_URL = "https://192.168.2.228:31015"
API_BASE_URL = "https://gallery.homoludens.photos/pulse_of_pair/api/v1"

def get_portainer_token():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Portainer"""
    username = os.getenv("PORTAINER_USERNAME", "admin")
    password = os.getenv("PORTAINER_PASSWORD", "admin")
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {username}/***")
    print(f"üîó URL: {PORTAINER_URL}")
    
    try:
        response = requests.post(
            f"{PORTAINER_URL}/api/auth",
            json={"username": username, "password": password},
            verify=False,
            timeout=10
        )
        
        if response.status_code == 200:
            token = response.json().get("jwt")
            print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return token
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Portainer: {e}")
        return None

def get_endpoint_id(token):
    """–ü–æ–ª—É—á–∞–µ—Ç ID endpoint'–∞"""
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(
            f"{PORTAINER_URL}/api/endpoints",
            headers=headers,
            verify=False,
            timeout=10
        )
        
        if response.status_code == 200:
            endpoints = response.json()
            for endpoint in endpoints:
                if endpoint.get("Name") == "local":
                    print("‚úÖ Endpoint –Ω–∞–π–¥–µ–Ω: local")
                    return endpoint.get("Id")
            
            print("‚ùå Endpoint 'local' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è endpoints: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è endpoint ID: {e}")
        return None

def execute_sql_command(token, endpoint_id, sql_command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL
        response = requests.get(
            f"{PORTAINER_URL}/api/endpoints/{endpoint_id}/docker/containers/json",
            headers=headers,
            verify=False,
            timeout=10
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {response.status_code}")
            return False
        
        containers = response.json()
        postgres_container = None
        
        for container in containers:
            names = container.get("Names", [])
            if any("postgres" in name.lower() for name in names):
                postgres_container = container
                break
        
        if not postgres_container:
            print("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        container_id = postgres_container.get("Id")
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL –Ω–∞–π–¥–µ–Ω: {container_id[:12]}...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∫–æ–º–∞–Ω–¥—É
        exec_data = {
            "AttachStdin": False,
            "AttachStdout": True,
            "AttachStderr": True,
            "Tty": False,
            "Cmd": [
                "psql", "-U", "pair_user", "-d", "pair_helper", "-c", sql_command
            ]
        }
        
        response = requests.post(
            f"{PORTAINER_URL}/api/endpoints/{endpoint_id}/docker/containers/{container_id}/exec",
            headers=headers,
            json=exec_data,
            verify=False,
            timeout=30
        )
        
        if response.status_code == 201:
            exec_id = response.json().get("Id")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            response = requests.post(
                f"{PORTAINER_URL}/api/endpoints/{endpoint_id}/docker/exec/{exec_id}/start",
                headers=headers,
                json={"Detach": False, "Tty": False},
                verify=False,
                timeout=30
            )
            
            if response.status_code == 200:
                print("‚úÖ SQL –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: {response.status_code}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è exec: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False

def reset_database():
    """–û—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö Pair Helper...")
    print("=" * 60)
    
    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ Telegram ID
    exclude_raw = os.getenv("EXCLUDE_TG_IDS", "").strip()
    exclude_list = [x.strip() for x in exclude_raw.split(",") if x.strip()]
    print(f"üö´ –ò—Å–∫–ª—é—á–∞–µ–º Telegram ID: {', '.join(exclude_list) if exclude_list else '‚Äî'}")
    exclude_sql = ",".join([f"'{x}'" for x in exclude_list]) or "''"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = get_portainer_token()
    if not token:
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º endpoint ID
    endpoint_id = get_endpoint_id(token)
    if not endpoint_id:
        return False
    
    # –¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–∞—Ä
    sql_commands = [f"""
BEGIN;

-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫ —É–¥–∞–ª–µ–Ω–∏—é (–ø–æ telegram_id, –∏—Å–∫–ª—é—á–∞—è —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö)
CREATE TEMP TABLE tmp_victim_users AS
  SELECT id FROM users
  WHERE COALESCE(telegram_id::text, '') NOT IN ({exclude_sql});

-- –ü–∞—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
CREATE TEMP TABLE tmp_victim_pairs AS
  SELECT id FROM pairs
  WHERE user1_id IN (SELECT id FROM tmp_victim_users)
     OR user2_id IN (SELECT id FROM tmp_victim_users);

-- –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
DO $$
BEGIN
  BEGIN
    EXECUTE 'DELETE FROM user_answers WHERE user_id IN (SELECT id FROM tmp_victim_users)';
  EXCEPTION WHEN undefined_table THEN NULL; END;

  BEGIN
    EXECUTE 'DELETE FROM user_question_status WHERE user_id IN (SELECT id FROM tmp_victim_users)';
  EXCEPTION WHEN undefined_table THEN NULL; END;

  BEGIN
    EXECUTE 'DELETE FROM mood_entries WHERE user_id IN (SELECT id FROM tmp_victim_users)';
  EXCEPTION WHEN undefined_table THEN NULL; END;

  BEGIN
    EXECUTE 'DELETE FROM appreciations WHERE user_id IN (SELECT id FROM tmp_victim_users)';
  EXCEPTION WHEN undefined_table THEN NULL; END;

  BEGIN
    EXECUTE 'DELETE FROM ritual_checks WHERE user_id IN (SELECT id FROM tmp_victim_users)';
  EXCEPTION WHEN undefined_table THEN NULL; END;

  BEGIN
    EXECUTE 'DELETE FROM calendar_events WHERE user_id IN (SELECT id FROM tmp_victim_users)';
  EXCEPTION WHEN undefined_table THEN NULL; END;

  BEGIN
    EXECUTE 'DELETE FROM female_cycle_logs WHERE user_id IN (SELECT id FROM tmp_victim_users)';
  EXCEPTION WHEN undefined_table THEN NULL; END;

  BEGIN
    EXECUTE 'DELETE FROM female_cycle WHERE user_id IN (SELECT id FROM tmp_victim_users)';
  EXCEPTION WHEN undefined_table THEN NULL; END;

  BEGIN
    EXECUTE 'DELETE FROM emotion_notes WHERE user_id IN (SELECT id FROM tmp_victim_users)';
  EXCEPTION WHEN undefined_table THEN NULL; END;

  BEGIN
    EXECUTE 'DELETE FROM invitations WHERE inviter_id IN (SELECT id FROM tmp_victim_users)';
  EXCEPTION WHEN undefined_table THEN NULL; END;
END$$;

-- –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç –ø–∞—Ä—ã
DO $$
BEGIN
  BEGIN
    EXECUTE 'DELETE FROM pair_daily_questions WHERE pair_id IN (SELECT id FROM tmp_victim_pairs)';
  EXCEPTION WHEN undefined_table THEN NULL; END;

  BEGIN
    EXECUTE 'DELETE FROM rituals WHERE pair_id IN (SELECT id FROM tmp_victim_pairs)';
  EXCEPTION WHEN undefined_table THEN NULL; END;
END$$;

-- –£–¥–∞–ª—è–µ–º –ø–∞—Ä—ã
DELETE FROM pairs WHERE id IN (SELECT id FROM tmp_victim_pairs);

-- –ò —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DELETE FROM users WHERE id IN (SELECT id FROM tmp_victim_users);

-- –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
DROP TABLE IF EXISTS tmp_victim_pairs;
DROP TABLE IF EXISTS tmp_victim_users;

COMMIT;
"""]
    
    print("üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")
    
    for i, sql in enumerate(sql_commands, 1):
        print(f"  {i:2d}. –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ –æ—á–∏—Å—Ç–∫–∏...")
        if not execute_sql_command(token, endpoint_id, sql):
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {i}")
            return False
    
    print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("üìä –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Ç—Ä–æ–Ω—É—Ç—ã")
    
    return True

if __name__ == "__main__":
    print("üóëÔ∏è  –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö Pair Helper")
    print("=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –¥–∞–Ω–Ω—ã–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–∞—Ä—ã, –æ—Ç–≤–µ—Ç—ã –∏ —Ç.–ø.)")
    print("   –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–ø—Ä–æ—Å—ã) –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è.")
    print()
    
    confirm = input("ü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    
    if confirm.lower() in ['yes', 'y', '–¥–∞', '–¥']:
        reset_database()
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

