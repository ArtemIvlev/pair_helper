#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
"""

import psycopg2
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': '192.168.2.228',
    'port': 5432,
    'database': 'pair_helper',
    'user': 'admin',
    'password': 'Passw0rd'
}

def check_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users;")
        users_count = cursor.fetchone()[0]
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—ã
        cursor.execute("SELECT COUNT(*) FROM pairs;")
        pairs_count = cursor.fetchone()[0]
        print(f"üíï –ü–∞—Ä: {pairs_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        cursor.execute("SELECT COUNT(*) FROM invitations;")
        invitations_count = cursor.fetchone()[0]
        print(f"üé´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {invitations_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        if users_count > 0:
            cursor.execute("SELECT id, first_name, telegram_id FROM users;")
            users = cursor.fetchall()
            print("\nüë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for user in users:
                print(f"  ID: {user[0]}, –ò–º—è: {user[1]}, Telegram ID: {user[2]}")
        
        if pairs_count > 0:
            cursor.execute("SELECT id, user1_id, user2_id FROM pairs;")
            pairs = cursor.fetchall()
            print("\nüíï –°–ø–∏—Å–æ–∫ –ø–∞—Ä:")
            for pair in pairs:
                print(f"  ID: {pair[0]}, User1: {pair[1]}, User2: {pair[2]}")
        
        if invitations_count > 0:
            cursor.execute("SELECT id, code, inviter_id, is_used FROM invitations;")
            invitations = cursor.fetchall()
            print("\nüé´ –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:")
            for inv in invitations:
                print(f"  ID: {inv[0]}, –ö–æ–¥: {inv[1]}, –ü—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π: {inv[2]}, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {inv[3]}")
        
        cursor.close()
        conn.close()
        
        return users_count, pairs_count, invitations_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 0, 0, 0

def reset_data():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        print("\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        print("=" * 50)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        cursor.execute("SET session_replication_role = replica;")
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        tables = [
            'emotion_notes',
            'calendar_events', 
            'rituals',
            'daily_questions',
            'pairs',
            'invitations',
            'users'
        ]
        
        for table in tables:
            try:
                cursor.execute(f"DELETE FROM {table};")
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ {table}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}: {e}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        sequences = [
            'users_id_seq',
            'pairs_id_seq', 
            'invitations_id_seq',
            'daily_questions_id_seq',
            'rituals_id_seq',
            'calendar_events_id_seq',
            'emotion_notes_id_seq'
        ]
        
        for seq in sequences:
            try:
                cursor.execute(f"ALTER SEQUENCE {seq} RESTART WITH 1;")
                print(f"üîÑ –°–±—Ä–æ—à–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {seq}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {seq}: {e}")
        
        # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        cursor.execute("SET session_replication_role = DEFAULT;")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        cursor.close()
        conn.close()
        
        print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    print("üóëÔ∏è  –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Pair Helper")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    users, pairs, invitations = check_data()
    
    if users == 0 and pairs == 0 and invitations == 0:
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞—è!")
    else:
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {pairs} –ø–∞—Ä, {invitations} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π")
        
        confirm = input("\nü§î –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? (yes/no): ")
        
        if confirm.lower() in ['yes', 'y', '–¥–∞', '–¥']:
            reset_data()
            
            print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            check_data()
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
