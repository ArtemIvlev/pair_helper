#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
"""

import psycopg2
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': os.getenv('DB_HOST', '192.168.2.228'),
    'port': int(os.getenv('DB_PORT', '5432')),
    'database': os.getenv('DB_NAME', 'pair_helper'),
    'user': os.getenv('DB_USER', 'admin'),
    'password': os.getenv('DB_PASSWORD', 'Passw0rd')
}

def check_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users;")
        users_count = cursor.fetchone()[0]
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—ã
        cursor.execute("SELECT COUNT(*) FROM pairs;")
        pairs_count = cursor.fetchone()[0]
        print(f"üíï –ü–∞—Ä: {pairs_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        cursor.execute("SELECT COUNT(*) FROM invitations;")
        invitations_count = cursor.fetchone()[0]
        print(f"üé´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {invitations_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        if users_count > 0:
            cursor.execute("SELECT id, first_name, telegram_id FROM users;")
            users = cursor.fetchall()
            print("\nüë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for user in users:
                print(f"  ID: {user[0]}, –ò–º—è: {user[1]}, Telegram ID: {user[2]}")
        
        if pairs_count > 0:
            cursor.execute("SELECT id, user1_id, user2_id FROM pairs;")
            pairs = cursor.fetchall()
            print("\nüíï –°–ø–∏—Å–æ–∫ –ø–∞—Ä:")
            for pair in pairs:
                print(f"  ID: {pair[0]}, User1: {pair[1]}, User2: {pair[2]}")
        
        if invitations_count > 0:
            cursor.execute("SELECT id, code, inviter_id, is_used FROM invitations;")
            invitations = cursor.fetchall()
            print("\nüé´ –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:")
            for inv in invitations:
                print(f"  ID: {inv[0]}, –ö–æ–¥: {inv[1]}, –ü—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π: {inv[2]}, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {inv[3]}")
        
        cursor.close()
        conn.close()
        
        return users_count, pairs_count, invitations_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 0, 0, 0

def reset_data():
    """–û—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        print("\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        exclude_tg_ids_str = os.getenv("EXCLUDE_TG_IDS", "")
        exclude_tg_ids = [int(x.strip()) for x in exclude_tg_ids_str.split(',') if x.strip()]
        
        if exclude_tg_ids:
            print(f"üö´ –ò—Å–∫–ª—é—á–∞–µ–º Telegram ID: {', '.join(map(str, exclude_tg_ids))}")
            exclude_condition = f"WHERE telegram_id NOT IN ({','.join(map(str, exclude_tg_ids))})"
            user_filter = f"WHERE user_id IN (SELECT id FROM users {exclude_condition})"
            pair_filter = f"WHERE pair_id IN (SELECT id FROM pairs WHERE user1_id IN (SELECT id FROM users {exclude_condition}) OR user2_id IN (SELECT id FROM users {exclude_condition}))"
        else:
            print("üö´ –ò—Å–∫–ª—é—á–∞–µ–º Telegram ID: ‚Äî")
            user_filter = ""
            pair_filter = ""
            exclude_condition = ""
        
        # SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        sql_commands = [
            f"DELETE FROM emotion_notes {user_filter};",
            f"DELETE FROM calendar_events {user_filter};",
            f"DELETE FROM rituals {pair_filter};",
            f"DELETE FROM user_answers {user_filter};",
            f"DELETE FROM user_question_status {user_filter};",
            f"DELETE FROM pair_daily_questions {pair_filter};",
            f"DELETE FROM female_cycle_logs {user_filter};",
            f"DELETE FROM female_cycles {user_filter};",
            f"DELETE FROM pair_invites {user_filter.replace('user_id', 'owner_user_id') if user_filter else ''};",
            f"DELETE FROM invitations {user_filter.replace('user_id', 'inviter_id') if user_filter else ''};",
            f"DELETE FROM pairs WHERE user1_id IN (SELECT id FROM users {exclude_condition}) OR user2_id IN (SELECT id FROM users {exclude_condition});" if exclude_condition else "DELETE FROM pairs;",
            f"DELETE FROM users {exclude_condition};"
        ]
        
        print("üßπ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        for i, sql in enumerate(sql_commands, 1):
            try:
                cursor.execute(sql)
                print(f"  ‚úÖ {i:2d}. –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
            except Exception as e:
                print(f"  ‚ùå {i:2d}. –û—à–∏–±–∫–∞: {e}")
                raise
        
        # –°–±—Ä–æ—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        sequences = [
            "users_id_seq", "pairs_id_seq", "pair_invites_id_seq",
            "user_answers_id_seq", "user_question_status_id_seq", 
            "pair_daily_questions_id_seq", "emotion_notes_id_seq",
            "calendar_events_id_seq", "rituals_id_seq",
            "female_cycles_id_seq", "female_cycle_logs_id_seq",
            "invitations_id_seq"
        ]
        
        print("\nüîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        for seq in sequences:
            try:
                cursor.execute(f"ALTER SEQUENCE {seq} RESTART WITH 1;")
            except Exception:
                # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        cursor.close()
        conn.close()
        
        print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìä –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–≤–æ–ø—Ä–æ—Å—ã, –∞–¥–º–∏–Ω—ã) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    print("üóëÔ∏è  –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö Pair Helper")
    print("=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –¥–∞–Ω–Ω—ã–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–∞—Ä—ã, –æ—Ç–≤–µ—Ç—ã –∏ —Ç.–ø.)")
    print("   –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–ø—Ä–æ—Å—ã) –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è.")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    users, pairs, invitations = check_data()
    
    if users == 0 and pairs == 0 and invitations == 0:
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞—è!")
    else:
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {pairs} –ø–∞—Ä, {invitations} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π")
        
        confirm = input("\nü§î –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ? (yes/no): ")
        
        if confirm.lower() in ['yes', 'y', '–¥–∞', '–¥']:
            reset_data()
            
            print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            check_data()
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
